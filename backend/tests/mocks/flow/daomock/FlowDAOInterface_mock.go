// Code generated by mockery. DO NOT EDIT.

package daomock

import (
	"github.com/asgardeo/thunder/internal/flow/model"
	mock "github.com/stretchr/testify/mock"
)

// FlowDAOInterfaceMock is an autogenerated mock type for the FlowDAOInterface type
type FlowDAOInterfaceMock struct {
	mock.Mock
}

// GetContextFromStore provides a mock function with given fields: flowID
func (_m *FlowDAOInterfaceMock) GetContextFromStore(flowID string) (model.EngineContext, bool) {
	ret := _m.Called(flowID)

	var r0 model.EngineContext
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (model.EngineContext, bool)); ok {
		return rf(flowID)
	}
	if rf, ok := ret.Get(0).(func(string) model.EngineContext); ok {
		r0 = rf(flowID)
	} else {
		r0 = ret.Get(0).(model.EngineContext)
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(flowID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetGraph provides a mock function with given fields: graphID
func (_m *FlowDAOInterfaceMock) GetGraph(graphID string) (model.GraphInterface, bool) {
	ret := _m.Called(graphID)

	var r0 model.GraphInterface
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (model.GraphInterface, bool)); ok {
		return rf(graphID)
	}
	if rf, ok := ret.Get(0).(func(string) model.GraphInterface); ok {
		r0 = rf(graphID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.GraphInterface)
		}
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(graphID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Init provides a mock function with given fields:
func (_m *FlowDAOInterfaceMock) Init() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsValidGraphID provides a mock function with given fields: graphID
func (_m *FlowDAOInterfaceMock) IsValidGraphID(graphID string) bool {
	ret := _m.Called(graphID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(graphID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// RegisterGraph provides a mock function with given fields: graphID, g
func (_m *FlowDAOInterfaceMock) RegisterGraph(graphID string, g model.GraphInterface) {
	_m.Called(graphID, g)
}

// RemoveContextFromStore provides a mock function with given fields: flowID
func (_m *FlowDAOInterfaceMock) RemoveContextFromStore(flowID string) error {
	ret := _m.Called(flowID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(flowID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreContextInStore provides a mock function with given fields: flowID, context
func (_m *FlowDAOInterfaceMock) StoreContextInStore(flowID string, context model.EngineContext) error {
	ret := _m.Called(flowID, context)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, model.EngineContext) error); ok {
		r0 = rf(flowID, context)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewFlowDAOInterfaceMock creates a new instance of FlowDAOInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFlowDAOInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *FlowDAOInterfaceMock {
	mock := &FlowDAOInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}