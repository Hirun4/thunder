// Code generated by mockery. DO NOT EDIT.

package enginemock

import (
	"github.com/asgardeo/thunder/internal/flow/model"
	"github.com/asgardeo/thunder/internal/system/error/serviceerror"
	mock "github.com/stretchr/testify/mock"
)

// FlowEngineInterfaceMock is an autogenerated mock type for the FlowEngineInterface type
type FlowEngineInterfaceMock struct {
	mock.Mock
}

// Execute provides a mock function with given fields: ctx
func (_m *FlowEngineInterfaceMock) Execute(ctx *model.EngineContext) (model.FlowStep, *serviceerror.ServiceError) {
	ret := _m.Called(ctx)

	var r0 model.FlowStep
	var r1 *serviceerror.ServiceError
	if rf, ok := ret.Get(0).(func(*model.EngineContext) (model.FlowStep, *serviceerror.ServiceError)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(*model.EngineContext) model.FlowStep); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(model.FlowStep)
	}

	if rf, ok := ret.Get(1).(func(*model.EngineContext) *serviceerror.ServiceError); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*serviceerror.ServiceError)
		}
	}

	return r0, r1
}

// NewFlowEngineInterfaceMock creates a new instance of FlowEngineInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFlowEngineInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *FlowEngineInterfaceMock {
	mock := &FlowEngineInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}