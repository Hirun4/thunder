// Code generated by mockery. DO NOT EDIT.

package applicationservicemock

import (
	"github.com/asgardeo/thunder/internal/application/model"
	mock "github.com/stretchr/testify/mock"
)

// ApplicationServiceInterfaceMock is an autogenerated mock type for the ApplicationServiceInterface type
type ApplicationServiceInterfaceMock struct {
	mock.Mock
}

// CreateApplication provides a mock function with given fields: app
func (_m *ApplicationServiceInterfaceMock) CreateApplication(app *model.Application) (*model.Application, error) {
	ret := _m.Called(app)

	var r0 *model.Application
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Application) (*model.Application, error)); ok {
		return rf(app)
	}
	if rf, ok := ret.Get(0).(func(*model.Application) *model.Application); ok {
		r0 = rf(app)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Application)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Application) error); ok {
		r1 = rf(app)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteApplication provides a mock function with given fields: appID
func (_m *ApplicationServiceInterfaceMock) DeleteApplication(appID string) error {
	ret := _m.Called(appID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(appID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetApplication provides a mock function with given fields: appID
func (_m *ApplicationServiceInterfaceMock) GetApplication(appID string) (*model.Application, error) {
	ret := _m.Called(appID)

	var r0 *model.Application
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Application, error)); ok {
		return rf(appID)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Application); ok {
		r0 = rf(appID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Application)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(appID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApplicationList provides a mock function with given fields:
func (_m *ApplicationServiceInterfaceMock) GetApplicationList() ([]model.Application, error) {
	ret := _m.Called()

	var r0 []model.Application
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]model.Application, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.Application); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Application)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOAuthApplication provides a mock function with given fields: clientID
func (_m *ApplicationServiceInterfaceMock) GetOAuthApplication(clientID string) (*model.OAuthApplication, error) {
	ret := _m.Called(clientID)

	var r0 *model.OAuthApplication
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.OAuthApplication, error)); ok {
		return rf(clientID)
	}
	if rf, ok := ret.Get(0).(func(string) *model.OAuthApplication); ok {
		r0 = rf(clientID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.OAuthApplication)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(clientID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateApplication provides a mock function with given fields: appID, app
func (_m *ApplicationServiceInterfaceMock) UpdateApplication(appID string, app *model.Application) (*model.Application, error) {
	ret := _m.Called(appID, app)

	var r0 *model.Application
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *model.Application) (*model.Application, error)); ok {
		return rf(appID, app)
	}
	if rf, ok := ret.Get(0).(func(string, *model.Application) *model.Application); ok {
		r0 = rf(appID, app)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Application)
		}
	}

	if rf, ok := ret.Get(1).(func(string, *model.Application) error); ok {
		r1 = rf(appID, app)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewApplicationServiceInterfaceMock creates a new instance of ApplicationServiceInterfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewApplicationServiceInterfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ApplicationServiceInterfaceMock {
	mock := &ApplicationServiceInterfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}